Below are 12 mid-level exercises designed to help you practice **arrow functions**, **destructuring**, **async/await**, and **modules** in JavaScript (Node.js context). These exercises build on basic concepts and introduce slightly more complexity to reinforce understanding. Each exercise includes a task, explanation, and solution wrapped in an `<xaiArtifact>` tag as per the requirements. The solutions are concise, practical, and include error handling where relevant.

---

### Exercises on Arrow Functions

1. **Filter Array with Arrow Function**
   - **Task**: Write a function using an arrow function to filter an array of numbers and return only even numbers.
   - **Explanation**: Arrow functions provide a concise syntax for functions. This exercise uses an arrow function with the `filter` method.
   - **Solution**:
     <xaiArtifact artifact_id="0a4fb8b8-cc44-4842-a386-af263bebdafa" artifact_version_id="9d7cea83-bda3-4266-aba0-9c9843ac6757" title="filterEven.js" contentType="text/javascript">
     const numbers = [1, 2, 3, 4, 5, 6];
     const filterEven = numbers => numbers.filter(num => num % 2 === 0);
     console.log(filterEven(numbers)); // Output: [2, 4, 6]
     </xaiArtifact>

2. **Map Objects with Arrow Function**
   - **Task**: Create an arrow function that maps an array of objects to an array of their `name` properties.
   - **Explanation**: Demonstrates arrow functions in a `map` operation with objects.
   - **Solution**:
     <xaiArtifact artifact_id="458e1b06-bd88-43bc-8286-60d8e3213ea8" artifact_version_id="19039e12-5787-4dc0-8797-87b92e70a2ee" title="mapNames.js" contentType="text/javascript">
     const users = [{ name: "Alice", age: 25 }, { name: "Bob", age: 30 }];
     const getNames = users => users.map(user => user.name);
     console.log(getNames(users)); // Output: ["Alice", "Bob"]
     </xaiArtifact>

3. **Timeout with Arrow Function**
   - **Task**: Use an arrow function in a `setTimeout` to log a message after 1 second.
   - **Explanation**: Arrow functions are often used in callbacks for their concise syntax and lexical `this` binding.
   - **Solution**:
     <xaiArtifact artifact_id="0450788b-5142-4102-9524-74a7fc53044f" artifact_version_id="566a1c91-1124-45dd-ae41-c15090ef557e" title="timeoutLog.js" contentType="text/javascript">
     setTimeout(() => console.log("Delayed message!"), 1000);
     </xaiArtifact>

---

### Exercises on Destructuring

4. **Destructure Object in Function Parameter**
   - **Task**: Write a function that takes an object with `name` and `age` properties, destructures them in the parameter, and returns a formatted string.
   - **Explanation**: Destructuring in function parameters simplifies accessing object properties.
   - **Solution**:
     <xaiArtifact artifact_id="b41f0063-6d1d-4668-9230-ac3f198e3f64" artifact_version_id="2c199f3a-6750-4f01-8982-2609ebf9d93d" title="formatUser.js" contentType="text/javascript">
     const formatUser = ({ name, age }) => `${name} is ${age} years old`;
     const user = { name: "Alice", age: 25 };
     console.log(formatUser(user)); // Output: Alice is 25 years old
     </xaiArtifact>

5. **Destructure Array in Loop**
   - **Task**: Given an array of `[name, score]` pairs, use destructuring in a `for...of` loop to log each name and score.
   - **Explanation**: Array destructuring simplifies handling array elements in loops.
   - **Solution**:
     <xaiArtifact artifact_id="88c84976-583f-40a5-bd63-371519393aed" artifact_version_id="76dd8473-881f-4d7d-aefe-b852214b45ce" title="logScores.js" contentType="text/javascript">
     const scores = [["Alice", 95], ["Bob", 88]];
     for (const [name, score] of scores) {
       console.log(`${name} scored ${score}`);
     }
     // Output: Alice scored 95
     //         Bob scored 88
     </xaiArtifact>

6. **Nested Destructuring**
   - **Task**: Destructure a nested object to extract `name` and `city` from an object like `{ user: { name: "Alice", address: { city: "Boston" } } }`.
   - **Explanation**: Demonstrates destructuring nested objects for cleaner code.
   - **Solution**:
     <xaiArtifact artifact_id="3d5cfdd9-de1a-42fc-863a-4ce41adac1c3" artifact_version_id="13d91abc-46c2-457d-ad74-d4a18479d472" title="nestedDestructure.js" contentType="text/javascript">
     const data = { user: { name: "Alice", address: { city: "Boston" } } };
     const { user: { name, address: { city } } } = data;
     console.log(`Name: ${name}, City: ${city}`); // Output: Name: Alice, City: Boston
     </xaiArtifact>

---

### Exercises on Async/Await

7. **Fetch Data with Async/Await**
   - **Task**: Write an async function that fetches data from a JSON API (e.g., `https://jsonplaceholder.typicode.com/users/1`) and logs the userâ€™s name.
   - **Explanation**: Async/await simplifies Promise-based code for asynchronous operations like HTTP requests.
   - **Solution**:
     <xaiArtifact artifact_id="1880541f-a1e8-46de-8edf-774d4ba71f1e" artifact_version_id="a946de85-c552-4cbd-ad87-84bd8a5d102e" title="fetchUser.js" contentType="text/javascript">
     const fetchUser = async () => {
       try {
         const response = await fetch("https://jsonplaceholder.typicode.com/users/1");
         if (!response.ok) throw new Error("Network error");
         const { name } = await response.json();
         console.log("User name:", name);
       } catch (error) {
         console.error("Error:", error.message);
       }
     };
     fetchUser();
     </xaiArtifact>

8. **Read File with Async/Await**
   - **Task**: Use the `fs.promises` module to read a file asynchronously and log its contents.
   - **Explanation**: Demonstrates async/await with Node.js file system operations.
   - **Solution**:
     <xaiArtifact artifact_id="8b457e9f-b160-4604-a517-6a305b0488ed" artifact_version_id="a2e76bf0-79b9-474c-83ed-db8b14e9aaa7" title="readFile.js" contentType="text/javascript">
     const fs = require("fs").promises;
     const readFile = async (filePath) => {
       try {
         const data = await fs.readFile(filePath, "utf8");
         console.log("File contents:", data);
       } catch (error) {
         console.error("Error:", error.message);
       }
     };
     readFile("example.txt");
     </xaiArtifact>

9. **Chain Async Operations**
   - **Task**: Write an async function that reads two files sequentially and concatenates their contents.
   - **Explanation**: Shows how to handle multiple async operations in sequence.
   - **Solution**:
     <xaiArtifact artifact_id="2de5b815-a476-4128-8570-4f5f27898f8d" artifact_version_id="4fa871c5-9786-4037-a11d-c9b05078df62" title="concatFiles.js" contentType="text/javascript">
     const fs = require("fs").promises;
     const concatFiles = async (file1, file2) => {
       try {
         const [data1, data2] = await Promise.all([
           fs.readFile(file1, "utf8"),
           fs.readFile(file2, "utf8")
         ]);
         return data1 + data2;
       } catch (error) {
         console.error("Error:", error.message);
       }
     };
     concatFiles("file1.txt", "file2.txt").then(result => console.log(result));
     </xaiArtifact>

---

### Exercises on Modules

10. **Export and Import Arrow Function**
    - **Task**: Create a module with an arrow function that calculates the square of a number and import it in another file.
    - **Explanation**: Demonstrates ES Modules (`export`/`import`) with arrow functions.
    - **Solution** (in `math.js`):
      <xaiArtifact artifact_id="bb4efc79-9b15-45ed-915b-65cbafcf480c" artifact_version_id="6182208c-53dd-4c07-b7a0-2ebd67a9808c" title="math.js" contentType="text/javascript">
      export const square = num => num * num;
      </xaiArtifact>
    - **Solution** (in `main.js`):
      <xaiArtifact artifact_id="fc0a5b33-c7a5-400b-95c0-2b1994811997" artifact_version_id="04836f13-9452-4564-b432-b370bd3b23a1" title="main.js" contentType="text/javascript">
      import { square } from "./math.js";
      console.log(square(5)); // Output: 25
      </xaiArtifact>
    - **Run**: Use `node --experimental-modules main.js` (or add `"type": "module"` to `package.json`).

11. **Export Multiple Functions**
    - **Task**: Create a module exporting two arrow functions (`add` and `subtract`) and use them in another file.
    - **Explanation**: Shows how to export multiple functions and import them selectively.
    - **Solution** (in `utils.js`):
      <xaiArtifact artifact_id="e679f10e-81f1-4b3c-b585-cf5fa4def882" artifact_version_id="afabedf5-5117-4e89-b063-ffeb83a0a3d2" title="utils.js" contentType="text/javascript">
      export const add = (a, b) => a + b;
      export const subtract = (a, b) => a - b;
      </xaiArtifact>
    - **Solution** (in `main.js`):
      <xaiArtifact artifact_id="dfdce74d-d830-4a57-b14f-a8a9e6ca0305" artifact_version_id="993e19f4-8635-426a-8fcc-456a76dd0622" title="main.js" contentType="text/javascript">
      import { add, subtract } from "./utils.js";
      console.log("Add:", add(10, 5)); // Output: Add: 15
      console.log("Subtract:", subtract(10, 5)); // Output: Subtract: 5
      </xaiArtifact>

12. **Default Export with Async Function**
    - **Task**: Create a module with a default-exported async function that delays for 1 second and returns a message, then call it.
    - **Explanation**: Combines async/await with default exports in ES Modules.
    - **Solution** (in `delay.js`):
      <xaiArtifact artifact_id="65bfbd18-70a6-41fe-9775-7d3a98444431" artifact_version_id="32db3016-a412-4298-9c01-404c9d481331" title="delay.js" contentType="text/javascript">
      export default async function delayMessage(msg) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        return `Message: ${msg}`;
      }
      </xaiArtifact>
    - **Solution** (in `main.js`):
      <xaiArtifact artifact_id="1e957348-2e07-4f2a-9353-815f5d6120df" artifact_version_id="99c57382-7ce9-4d49-9734-5fbaf82ddec9" title="main.js" contentType="text/javascript">
      import delayMessage from "./delay.js";
      async function run() {
        try {
          const result = await delayMessage("Hello!");
          console.log(result); // Output: Message: Hello!
        } catch (error) {
          console.error("Error:", error.message);
        }
      }
      run();
      </xaiArtifact>

---

### Tips for Completing Exercises
- **Setup**: For file-related exercises (e.g., #8, #9), create sample files (`example.txt`, `file1.txt`, `file2.txt`) with some text content.
- **Modules**: For ES Modules (#10â€“12), add `"type": "module"` to `package.json` or use `node --experimental-modules`. Alternatively, use CommonJS (`module.exports`/`require`) if preferred.
- **Error Handling**: The solutions include basic error handling with `try...catch` for async operations.
- **Testing**: Run each script with `node filename.js`. For HTTP requests (#7), ensure an internet connection.
- **Environment**: Use Node.js (v14 or later recommended) for ES Module support.

---

### Further Learning
- Explore advanced arrow function use cases (e.g., with `this` in classes).
- Practice destructuring with rest/spread operators (e.g., `{ ...rest }`).
- Combine async/await with Promises for parallel operations (e.g., `Promise.all`).
- Learn CommonJS modules (`require`/`module.exports`) for older Node.js projects.
- Check Node.js docs (https://nodejs.org/api/) or xAIâ€™s API (https://x.ai/api) for advanced integrations.

If you need more complex exercises, help with debugging, or additional examples, let me know!